import requests
import os
import json
import datetime
from dotenv import load_dotenv
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.text import Text
from rich import box
load_dotenv()


VT_API_KEY = os.getenv("VT_API_KEY")
console = Console()

def check_ip(ip):
    url = f"https://www.virustotal.com/api/v3/ip_addresses/{ip}"
    headers = {"x-apikey": VT_API_KEY}
    res = requests.get(url, headers=headers)
    return res.json() if res.ok else res.text

def save_vt_results(ip, data, output_format="both"):
    """
    Save VirusTotal results to file(s)
    output_format: "json", "text", or "both"
    """
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    base_filename = f"vt_scan_{ip}_{timestamp}"
    
    results = []
    
    if output_format in ["json", "both"]:
        # Save JSON format
        json_filename = f"{base_filename}.json"
        with open(json_filename, 'w', encoding='utf-8') as f:
            json.dump({
                "scan_info": {
                    "ip": ip,
                    "timestamp": datetime.datetime.now().isoformat(),
                    "tool": "VirusTotal API v3"
                },
                "results": data
            }, f, indent=2, ensure_ascii=False)
        results.append(json_filename)
    
    if output_format in ["text", "both"]:
        # Save human-readable text format
        txt_filename = f"{base_filename}.txt"
        with open(txt_filename, 'w', encoding='utf-8') as f:
            write_readable_report(f, ip, data)
        results.append(txt_filename)
    
    return results[0] if len(results) == 1 else results

def write_readable_report(file, ip, data):
    """Write a human-readable report"""
    file.write("=" * 80 + "\n")
    file.write(f"VIRUSTOTAL IP ANALYSIS REPORT\n")
    file.write("=" * 80 + "\n")
    file.write(f"IP Address: {ip}\n")
    file.write(f"Scan Time: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    file.write(f"Generated by: CyberCLI Tool\n")
    file.write("=" * 80 + "\n\n")
    
    if 'data' not in data:
        file.write(f"ERROR: {data}\n")
        return
    
    attributes = data['data'].get('attributes', {})
    
    # Basic Information
    file.write("📍 BASIC INFORMATION\n")
    file.write("-" * 40 + "\n")
    file.write(f"Country: {attributes.get('country', 'Unknown')}\n")
    file.write(f"Continent: {attributes.get('continent', 'Unknown')}\n")
    file.write(f"AS Owner: {attributes.get('as_owner', 'Unknown')}\n")
    file.write(f"AS Number: {attributes.get('asn', 'Unknown')}\n")
    file.write(f"Network: {attributes.get('network', 'Unknown')}\n\n")
    
    # Analysis Results
    last_analysis = attributes.get('last_analysis_results', {})
    file.write("🛡️ SECURITY ANALYSIS\n")
    file.write("-" * 40 + "\n")
    
    categories = {'malicious': [], 'suspicious': [], 'undetected': [], 'harmless': []}
    
    for engine, result in last_analysis.items():
        category = result.get('category', 'unknown')
        if category in categories:
            categories[category].append({
                'engine': engine,
                'result': result.get('result', 'N/A')
            })
    
    # Summary
    total = len(last_analysis)
    file.write(f"Total Engines: {total}\n")
    file.write(f"🔴 Malicious: {len(categories['malicious'])}\n")
    file.write(f"🟡 Suspicious: {len(categories['suspicious'])}\n")
    file.write(f"🟢 Harmless: {len(categories['harmless'])}\n")
    file.write(f"⚪ Undetected: {len(categories['undetected'])}\n\n")
    
    # Detailed Results
    if categories['malicious']:
        file.write("🚨 MALICIOUS DETECTIONS:\n")
        for detection in categories['malicious']:
            file.write(f"  • {detection['engine']}: {detection['result']}\n")
        file.write("\n")
    
    if categories['suspicious']:
        file.write("⚠️ SUSPICIOUS DETECTIONS:\n")
        for detection in categories['suspicious']:
            file.write(f"  • {detection['engine']}: {detection['result']}\n")
        file.write("\n")
    
    # Additional Information
    if 'last_analysis_date' in attributes:
        analysis_date = datetime.datetime.fromtimestamp(attributes['last_analysis_date'])
        file.write(f"Last Analysis Date: {analysis_date.strftime('%Y-%m-%d %H:%M:%S')}\n")
    
    file.write("\n" + "=" * 80 + "\n")
    file.write("Report generated by CyberCLI - VirusTotal Integration\n")
    file.write("=" * 80 + "\n")

def display_vt_table(ip, data):
    """Display VirusTotal results in beautiful tables"""
    if 'data' not in data:
        console.print(f"[red]❌ Error: {data}[/red]")
        return
    
    attributes = data['data'].get('attributes', {})
    
    # Header with IP info
    header_text = Text(f"🔍 VirusTotal Analysis Report", style="bold blue")
    console.print(Panel(header_text, title=f"IP: {ip}", border_style="blue"))
    
    # Basic Information Table
    info_table = Table(title="📍 Basic Information", box=box.ROUNDED)
    info_table.add_column("Property", style="cyan", width=20)
    info_table.add_column("Value", style="green")
    
    info_table.add_row("🌍 Country", attributes.get('country', 'Unknown'))
    info_table.add_row("🌎 Continent", attributes.get('continent', 'Unknown'))
    info_table.add_row("🏢 AS Owner", attributes.get('as_owner', 'Unknown'))
    info_table.add_row("🔢 AS Number", str(attributes.get('asn', 'Unknown')))
    info_table.add_row("🌐 Network", attributes.get('network', 'Unknown'))
    
    if 'last_analysis_date' in attributes:
        analysis_date = datetime.datetime.fromtimestamp(attributes['last_analysis_date'])
        info_table.add_row("📅 Last Analysis", analysis_date.strftime('%Y-%m-%d %H:%M:%S'))
    
    console.print(info_table)
    console.print()
    
    # Security Analysis Summary
    last_analysis = attributes.get('last_analysis_results', {})
    stats = attributes.get('last_analysis_stats', {})
    
    summary_table = Table(title="🛡️ Security Analysis Summary", box=box.ROUNDED)
    summary_table.add_column("Category", style="cyan", width=15)
    summary_table.add_column("Count", style="white", width=10)
    summary_table.add_column("Percentage", style="white", width=12)
    
    total_engines = len(last_analysis)
    
    categories_data = [
        ("🔴 Malicious", stats.get('malicious', 0), 'red'),
        ("🟡 Suspicious", stats.get('suspicious', 0), 'yellow'),
        ("🟢 Harmless", stats.get('harmless', 0), 'green'),
        ("⚪ Undetected", stats.get('undetected', 0), 'white'),
    ]
    
    for category, count, color in categories_data:
        percentage = f"{(count/total_engines*100):.1f}%" if total_engines > 0 else "0%"
        summary_table.add_row(
            category,
            f"[{color}]{count}[/{color}]",
            f"[{color}]{percentage}[/{color}]"
        )
    
    summary_table.add_row("📊 Total Engines", str(total_engines), "100%")
    console.print(summary_table)
    console.print()
    
    # Detailed Engine Results
    if last_analysis:
        display_engine_results_table(last_analysis)

def display_engine_results_table(analysis_results):
    """Display detailed engine results in a table"""
    
    # Categorize results
    categories = {
        'malicious': [],
        'suspicious': [],
        'harmless': [],
        'undetected': []
    }
    
    for engine, result in analysis_results.items():
        category = result.get('category', 'undetected')
        if category in categories:
            categories[category].append({
                'engine': engine,
                'result': result.get('result', 'N/A'),
                'method': result.get('method', 'N/A')
            })
    
    # Display malicious/suspicious first (most important)
    for category_name, items in [('malicious', categories['malicious']), 
                                ('suspicious', categories['suspicious'])]:
        if items:
            display_category_table(category_name, items)
    
    # Show harmless and undetected in a condensed format
    display_clean_engines_summary(categories['harmless'], categories['undetected'])

def display_category_table(category, items):
    """Display a table for a specific category (malicious/suspicious)"""
    if category == 'malicious':
        title = "🚨 Malicious Detections"
        color = "red"
    else:
        title = "⚠️ Suspicious Detections"
        color = "yellow"
    
    table = Table(title=title, box=box.HEAVY_EDGE)
    table.add_column("Security Engine", style="cyan", width=25)
    table.add_column("Detection Result", style=color, width=30)
    table.add_column("Method", style="white", width=15)
    
    for item in sorted(items, key=lambda x: x['engine']):
        table.add_row(
            item['engine'],
            item['result'],
            item['method']
        )
    
    console.print(table)
    console.print()

def display_clean_engines_summary(harmless, undetected):
    """Display a summary of clean/undetected engines"""
    
    # Harmless engines summary
    if harmless:
        harmless_table = Table(title="🟢 Clean Engines (Sample)", box=box.SIMPLE)
        harmless_table.add_column("Engine", style="green", width=20)
        harmless_table.add_column("Result", style="green", width=15)
        
        # Show first 10 harmless engines to avoid clutter
        for item in sorted(harmless, key=lambda x: x['engine'])[:10]:
            harmless_table.add_row(item['engine'], item['result'])
        
        if len(harmless) > 10:
            harmless_table.add_row(f"... and {len(harmless)-10} more", "clean")
        
        console.print(harmless_table)
        console.print()
    
    # Undetected engines summary  
    if undetected:
        undetected_names = [item['engine'] for item in sorted(undetected, key=lambda x: x['engine'])]
        undetected_text = ", ".join(undetected_names[:15])  # Show first 15
        if len(undetected) > 15:
            undetected_text += f" ... and {len(undetected)-15} more"
        
        console.print(Panel(
            undetected_text, 
            title=f"⚪ Undetected Engines ({len(undetected)} total)",
            border_style="white"
        ))
        console.print()
